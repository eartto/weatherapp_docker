{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport weatherService from '../services/weatherService';\nconst initialState = {\n  weatherReport: null,\n  loading: 'idle',\n  error: null\n};\nconst weatherReportSlice = createSlice({\n  name: 'weatherReport',\n  initialState,\n  reducers: {\n    setWeather: (state, action) => {\n      const weatherReport = action.payload;\n      state.weatherReport = weatherReport;\n      return state;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchWeatherReport.pending, state => {\n      state.loading = 'pending';\n    });\n    builder.addCase(fetchWeatherReport.fulfilled, (state, action) => {\n      state.loading = 'succeeded';\n      state.weatherReport = action.payload;\n    });\n    builder.addCase(fetchWeatherReport.rejected, (state, action) => {\n      state.loading = 'failed';\n      state.error = action.error.message;\n    });\n  }\n});\n/*\nexport const fetchWeatherReport = createAsyncThunk(\n    'weatherReport/fetchWeatherReport',\n    async (city: string) => {\n        const response = await weatherService.getCity(city)\n        return response\n    }\n)\n*/\nexport const fetchWeatherReport = city => {\n  return async dispatch => {\n    const weatherReport = await weatherService.getCity(city);\n    dispatch(setWeather(weatherReport));\n  };\n};\nexport const {\n  setWeather\n} = weatherReportSlice.actions;\nconst weatherReportReducer = weatherReportSlice.reducer;\nexport default weatherReportReducer;","map":{"version":3,"names":["createSlice","weatherService","initialState","weatherReport","loading","error","weatherReportSlice","name","reducers","setWeather","state","action","payload","extraReducers","builder","addCase","fetchWeatherReport","pending","fulfilled","rejected","message","city","dispatch","getCity","actions","weatherReportReducer","reducer"],"sources":["/home/eartto/weatherapp/weatherapp_frontend/src/reducers/weatherReportReducer.ts"],"sourcesContent":["import { createAsyncThunk, createSlice, Dispatch } from '@reduxjs/toolkit'\nimport weatherService from '../services/weatherService'\nimport { WeatherReport } from '../@types/weatherReport'\n\ninterface weatherReportState {\n    weatherReport: WeatherReport | null;\n    loading: 'idle' | 'pending' | 'succeeded' | 'failed';\n    error?: string | null;\n}\n\nconst initialState: weatherReportState = {\n    weatherReport: null,\n    loading: 'idle',\n    error: null\n}\n\nconst weatherReportSlice = createSlice({\n    name: 'weatherReport',\n    initialState,\n    reducers: {\n        setWeather: (state, action) => {\n            const weatherReport = action.payload\n            state.weatherReport = weatherReport\n            return state\n        }\n    },\n    extraReducers: (builder) => {\n        builder.addCase(fetchWeatherReport.pending, (state) => {\n            state.loading = 'pending'\n        })\n        builder.addCase(fetchWeatherReport.fulfilled, (state, action) => {\n            state.loading = 'succeeded'\n            state.weatherReport = action.payload\n        })\n        builder.addCase(fetchWeatherReport.rejected, (state, action) => {\n            state.loading = 'failed'\n            state.error = action.error.message\n        })\n    }\n})\n/*\nexport const fetchWeatherReport = createAsyncThunk(\n    'weatherReport/fetchWeatherReport',\n    async (city: string) => {\n        const response = await weatherService.getCity(city)\n        return response\n    }\n)\n*/\nexport const fetchWeatherReport = (city: string) => {\n    return async (dispatch: Dispatch) => {\n        const weatherReport = await weatherService.getCity(city)\n        dispatch(setWeather(weatherReport))\n    }\n}\n\nexport const { setWeather } = weatherReportSlice.actions\n\nconst weatherReportReducer = weatherReportSlice.reducer\n\nexport default weatherReportReducer"],"mappings":"AAAA,SAA2BA,WAAW,QAAkB,kBAAkB;AAC1E,OAAOC,cAAc,MAAM,4BAA4B;AASvD,MAAMC,YAAgC,GAAG;EACrCC,aAAa,EAAE,IAAI;EACnBC,OAAO,EAAE,MAAM;EACfC,KAAK,EAAE;AACX,CAAC;AAED,MAAMC,kBAAkB,GAAGN,WAAW,CAAC;EACnCO,IAAI,EAAE,eAAe;EACrBL,YAAY;EACZM,QAAQ,EAAE;IACNC,UAAU,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC3B,MAAMR,aAAa,GAAGQ,MAAM,CAACC,OAAO;MACpCF,KAAK,CAACP,aAAa,GAAGA,aAAa;MACnC,OAAOO,KAAK;IAChB;EACJ,CAAC;EACDG,aAAa,EAAGC,OAAO,IAAK;IACxBA,OAAO,CAACC,OAAO,CAACC,kBAAkB,CAACC,OAAO,EAAGP,KAAK,IAAK;MACnDA,KAAK,CAACN,OAAO,GAAG,SAAS;IAC7B,CAAC,CAAC;IACFU,OAAO,CAACC,OAAO,CAACC,kBAAkB,CAACE,SAAS,EAAE,CAACR,KAAK,EAAEC,MAAM,KAAK;MAC7DD,KAAK,CAACN,OAAO,GAAG,WAAW;MAC3BM,KAAK,CAACP,aAAa,GAAGQ,MAAM,CAACC,OAAO;IACxC,CAAC,CAAC;IACFE,OAAO,CAACC,OAAO,CAACC,kBAAkB,CAACG,QAAQ,EAAE,CAACT,KAAK,EAAEC,MAAM,KAAK;MAC5DD,KAAK,CAACN,OAAO,GAAG,QAAQ;MACxBM,KAAK,CAACL,KAAK,GAAGM,MAAM,CAACN,KAAK,CAACe,OAAO;IACtC,CAAC,CAAC;EACN;AACJ,CAAC,CAAC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMJ,kBAAkB,GAAIK,IAAY,IAAK;EAChD,OAAO,MAAOC,QAAkB,IAAK;IACjC,MAAMnB,aAAa,GAAG,MAAMF,cAAc,CAACsB,OAAO,CAACF,IAAI,CAAC;IACxDC,QAAQ,CAACb,UAAU,CAACN,aAAa,CAAC,CAAC;EACvC,CAAC;AACL,CAAC;AAED,OAAO,MAAM;EAAEM;AAAW,CAAC,GAAGH,kBAAkB,CAACkB,OAAO;AAExD,MAAMC,oBAAoB,GAAGnB,kBAAkB,CAACoB,OAAO;AAEvD,eAAeD,oBAAoB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}